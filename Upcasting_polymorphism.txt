UpCasting
파생 클래스에서 기본클래스로 캐스팅 하는것

calss Manager : public Emplyoee

Derived가 Base를 상속 받고 있음.(Derived is a Base)
Dereived 객체 C도 Base의 객체이기 때문에 Base를 가르키는 포인터가 c를 가리켜도 무방
명시적 타입 변환이 필요없다.
자식클래스 중에서 부모클래스로부터 상속받은부분만을 부모클래스 포인터를 통해 가리킬 수 있음


DownCasting
기본 클래스 포인터가 가리키는 객체를 파생 클래스의 포인터로 가리키는 것
자식 형식에서 부모 형식을 사용하는것이며, 업캐스팅에서 다시 원래의 형으로 되돌려주는 작업
명시적 타입 변환을 지정해야함.

Dereived* 포인터가 Base객체를 가리킬때, p_p->what()를 하면, Derived의 what함수가 호출되어야 하지만 불가능, 
이유는 p_p가 가르키는 객체는 Base 객체이므로, Dereived의 정보가 없기 때문에.
강제적으로 타입 변환을 하면 컴파일은 될 수 있지만, 런타임 오류가 발생할 수 있음(컴파일에서 에러를 찾기 어렵기 때문에 권유하지 않음)
타입변환으로 할 경우 dynamic_cast를 사용(상속 관계에 있는 두 포인터들 간에 캐스팅을 해줌)

포인터는 상속된(Derived) 클래스의 객체만을 가리킬 수 있음

다형성
하나의 메소를 호출했음에도 불구하고 여러가지 다른 작업들을 하는것

print_info를 호출 하였을 때, 어떤 경우는 Employee가 어떤경우는 Manager가 호출되어야

다형성(polymorphism): 객체들의 타입이 다르면 똑같은 메시지가 전달되더라도 서로 다른 동작을 하는 것


- 똑같은 메시지를 보내지만 객체의 타입이 다르면 서로 다른 결과를 얻는 것
- 메시지를 보내는 측에서는 객체의 타입을 알 필요가 없음
- 실행시간에 객체의 타입에 따라 자동적으로 적합한 동작이 결정됨 
 
 다형성은 객체 지향 기법에서 하나의 코드로 다양한 타입의 객체를 처리하는 중요한 기술이다. 